---
layout: post
section-type: post
title: TCP/IP Nagle 算法
category: tech
tags: [ 'Nagle' ]
---


Nagle 算法：该算法的目的在于减少广域网（WAN）上小分组的数目。该算法指出：如果某个给定链接上有待确认数据（outstanding data），那么原本应该作为用户写操作之响应的在该链接上立即发送相应小分组的行为就不会发生，直到现有数据被确认为止。这里的小分组的定义就是小于 MSS 的任何分组。 TCP 总是尽可能的发送最大大小的分组，Nagle 算法的目的在于防止一个链接在任何时刻有多个小分组未确认。默认情况下  nagle 算法是开启的。

ACK 延滞算法（delayed ACK algorithm） ：该算法使得TCP在接收到数据后不立即发送 ACK ， 而是等待一小段时间（典型值为50~200ms），然后才发送ACK。TCP 期待在这一小段时间内自身有数据发送回对端，被延滞的 ACK 就可以由这些数据捎带，从而省掉一个TCP分节。

这两个算法对于 Telnet 这种类型的客户来说影响不大，但是对于服务器不在反方向产生数据以便携带ACK的客户来说，ACK 延滞算法能明显的察觉到延迟，因为客户TCP要等到服务器的ACK延滞定时器超时才能继续给服务器发送数据。这些客户需要一种禁止 Nagle 算法的方法，  TCP_NODELAY 选项就能起到这样的作用。

int setsockopt(int sockfd, int level, int optname, const void *optval, socklen_t optlen);
sockfd 指向一个打开的套接字描述符， level（级别）指定系统中解释选项的代码或为通用套接字代码，或为某个特定于协议的代码（例如IPv4,IPv6,TCP或STCP）。
optval 是一个指向某个变量（*optval）的指针，setsockopt 从*optval中取得选项待设置的新值。

<pre><code data-trim class="c">
{% raw %}
int optval = 1;
setsockopt(fd, IPPROTO_TCP, TCP_NODELAY, &optval, sizeof(optval));
{% endraw %} 
</code></pre>
禁止 Nagle 算法。	
